{"pageProps":{"post":{"title":"Java 8 New Language Features","excerpt":"This post discusses the new features introduced to Java 8 language.","date":"2019-07-06","image":{"cover":"","og":""},"slug":"java-8-new-language-features","content":"\r\n### Overview\r\n\r\nThis post discusses the new language features of **Java 8**. Java 8's release is the most awaited and is a major feature release of Java programming language.\r\n\r\nThese new features include **functional interfaces**, **interface default method**, **lambda expressions**, **method references**, **Optional**, and **Stream API**. We will also talk about some of **built-in functions** that implement Function Interface and the **New Date and Time API**.\r\n\r\n### Functional Interface\r\n\r\nFunctional Interface is an interface with **single abstract method (SAM)**. Static or the new default method is not counted. To indicate that an interface is a **Functional Interface**, annotation `@FunctionalInterface` on class level is needed. While an interface with SAM could still function as **Functional Interface** (qualified as lambda expression) even if it does not have such annotation (example is AWT's `ActionListener`), it is recommended that it be annotated.\r\n\r\nSome old built-in interfaces with SAM, such as `Comparator` and `Runnable`, have been annotated with `@FunctionalInterface` and can be used as lambda expressions.\r\n\r\n#### Example\r\n\r\n```java\r\n@FunctionalInterface\r\npublic interface Calculator {\r\n  long calculate(long x, long y);\r\n}\r\n```\r\n\r\nWe can implement above interface in two ways prior to Java 8.\r\n\r\n- Anonymous class\r\n\r\n```java\r\nCalculator division = new Calculator() {\r\n  @Override\r\n  public long calculate(long x, long y) {\r\n    return x / y;\r\n  }\r\n};\r\n\r\nlong quotient = division.calculate(10, 2);\r\n```\r\n\r\n- Concrete class\r\n\r\n```java\r\nclass Division implements Calculator {\r\n  @Override\r\n    public long calculate(long x, long y) {\r\n    return x / y;\r\n  }\r\n}\r\n```\r\n\r\n```java\r\nCalculator division = new Division() ;\r\nlong quotient = division.calculate(10, 2);\r\n```\r\n\r\nWith Java 8, there is a third way to to implement an interface and that is by using **Lambda Expressions**.\r\n\r\n### Lambda Expressions\r\n\r\nLambda expressions encapsulate a single unit of behavior and pass it to other code. To be able to create lambda expression, you need first a Funtional Interface. This is the reason why a Functional Interface has a single abstract method. Instead of an anonymous class, you can use lambda expression which is a concise alternative and shorthand replacement for it.\r\n\r\n#### Syntax\r\n\r\n```java\r\nparameter -> expression or statement body\r\n```\r\n\r\n#### Example\r\n\r\n```java\r\n(Integer x) -> { return x; };\r\n```\r\n\r\n#### Characteristics of Lambda Expression\r\n\r\n1. Optional type declaration\r\n\r\n```java\r\n(x) -> { return x; };\r\n```\r\n\r\n2. Optional parentheses<br>\r\n\r\n```java\r\nx -> { return x; };\r\n```\r\n\r\nParentheses are required if there are multiple parameters. Parameters are separated by comma (`,`).\r\n\r\n```java\r\n(x, y) -> { return x + y; };\r\n```\r\n\r\n3. Optional curly braces (`{}`) and optional `return` keyword\r\n\r\n```java\r\nx -> x;\r\n```\r\n\r\nCurly braces are required if body has multiple statements. `return` keyword is required for a function with return value if body has multiple statements. No `return` keyword is required if function does not return a value as in regular method.\r\n\r\n```java\r\nx -> {\r\n  System.out.println(\"Hello world!\");\r\n  return x;\r\n};\r\n```\r\n\r\n```java\r\nx -> {\r\n  System.out.println(\"Hello world!\");\r\n  System.out.println(\"Welcome to Java 8 Programming!\");\r\n};\r\n```\r\n\r\nRemember our `Calculator` interface? Here is how to implement it using lambda expression:\r\n\r\n```java\r\nCalculator multiplication = (a, b) -> a * b;    // or (a, b) -> Math.multiplyExact(a, b);\r\nCalculator division = (a, b) -> a / b;\r\nCalculator addition = (a, b) -> a + b;          // or (a, b) -> Math.addExact(a, b);\r\nCalculator subtraction = (a, b) -> a - b;       // or (a, b) -> Math.subtractExact(a, b);\r\n\r\nlong product = multiplication.calculate(5, 5);\r\nlong quotient = division.calculate(10, 2);\r\nlong sum = addition.calculate(5, 5);\r\nlong difference = subtraction.calculate(10, 4);\r\n```\r\n\r\n### Built-in Functions\r\n\r\nJava 8 ships 43 built-in functions under `java.util.function` package. **Thirty eight** (**38**) of them are specialization for primitive and other functions.\r\n\r\nThe following are the basic functions:\r\n\r\n1. `Function`\r\n2. `Consumer`\r\n3. `Supplier`\r\n4. `Predicate`\r\n\r\n#### Function\r\n\r\nFunction represents a function that accepts one argument and produces a result. The type parameter `T` represents the type of the input to the function while the second one R represents the type of result. The functonal method of this functional interface is `apply(Object)`.\r\n\r\n```java\r\n@FunctionalInterface\r\npublic interface Function<T,R>\r\n```\r\n\r\n##### Examples\r\n\r\nBelow is an example of Function that accepts a String argument and returns a String.\r\n\r\n```java\r\nFunction<String, String> f1 = a -> a;\r\nString message = f1.apply(\"Welcome to Java 8!\");\r\n```\r\n\r\nThis one accepts a String argument and returns an integer.\r\n\r\n```java\r\nFunction<String, Integer> f2 = a -> a.length();\r\nint textLength = f2.apply(\"Welcome to Java 8!\");\r\n```\r\n\r\n#### Consumer\r\n\r\nConsumer represents an operation that accepts a single input argument and returns no result. The type parameter `T` represents the type of the input to the operation. The functonal method of this functional interface is `accept(Object)`.\r\n\r\n```java\r\n@FunctionalInterface\r\npublic interface Consumer<T>\r\n```\r\n\r\n##### Examples\r\n\r\nBoth accept String input argument and returns no value.\r\n\r\n```java\r\nConsumer<String> c1 = a -> System.out.println(a);\r\nc1.accept(\"Welcome to Java 8!\");\r\n\r\nConsumer<String> c2 = a -> {\r\n  String message = \"Welcome to \" + a + \"!\";\r\n  System.out.println(message);\r\n};\r\nc2.accept(\"Java 8\");\r\n```\r\n\r\n#### Supplier\r\n\r\nSupplier Represents a supplier of results. The type parameter `T` represents the type of results supplied by the supplier. This is a functional interface whose functional method is `get()`.\r\n\r\n```java\r\n@FunctionalInterface\r\npublic interface Supplier<T>\r\n```\r\n\r\n##### Examples\r\n\r\nThis example returns a value of String type.\r\n\r\n```java\r\nSupplier<String> stringSupplier = () -> \"Welcome to Java 8!\";\r\nString message = stringSupplier.get();\r\n```\r\n\r\nAnd this one returns a value of User type.\r\n\r\n```java\r\nSupplier<User> userSupplier = () -> new User();\r\nUser user = userSupplier.get();\r\n```\r\n\r\n#### Predicate\r\n\r\nPredicate represents a predicate (boolean-valued function) of one argument. The type parameter `T` represents the type of the input to the predicate. This is a functional interface whose functional method is `test(Object)`.\r\n\r\n```java\r\n@FunctionalInterface\r\npublic interface Predicate<T>\r\n```\r\n\r\n##### Examples\r\n\r\nTo check if argument is equal to \"YES\" regardless of case:\r\n\r\n```java\r\nPredicate<String> answerPredicate = a -> \"YES\".equalsIgnoreCase(a);\r\nboolean isYes = answerPredicate.test(\"Yes\");\r\n```\r\n\r\nTo check if person is of legal age (18 and above):\r\n\r\n```java\r\npublic static Predicate<Integer> isLegalAge() {\r\n  return age -> age >= 18;\r\n}\r\n```\r\n\r\n```java\r\nboolean legalAge = isLegalAge().test(18);\r\n```\r\n\r\n#### Built-in Functions - Specialization\r\n\r\nOther built-in functions are specializations for primitive types and for basic or another specialization functions.\r\n\r\nTo check all other built-in functions, please visit this <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html\" target=\"blank\">Javadoc</a>.\r\n\r\n#### Existing Interface - Comparator\r\n\r\n`Comparator` is an existing interface in Java since version 1.2. This interface has a single abstract method, `compare(T o1, T o2)`, and, therefore, can be used as lambda expression similar to functions added to Java 8.\r\n\r\nPrior to Java 8, we would use <span class=\"inline-code\">Comparator</span> in sorting a collection the following way:\r\n\r\n```java\r\nList<String> choices = Arrays.asList(\"c\", \"a\", \"d\", \"b\", \"e\");\r\n\r\nCollections.sort(choices, new Comparator<String>() {\r\n  @Override\r\n  public int compare(String a, String b) {\r\n    return a.compareTo(b);\r\n  }\r\n});\r\n```\r\n\r\nWith Java 8:\r\n\r\n```java\r\nComparator<String> comparator = (a, b) -> a.compareTo(b);\r\nCollections.sort(choices, comparator);\r\n```\r\n\r\n```java\r\nCollections.sort(choices, (String a, String b) -> {\r\n  return a.compareTo(b);\r\n});\r\n```\r\n\r\n```java\r\nCollections.sort(choices, (String a, String b) -> a.compareTo(b));\r\n```\r\n\r\n```java\r\nCollections.sort(choices, (a, b) -> a.compareTo(b));\r\n```\r\n\r\n### Default Methods\r\n\r\nDefault methods enable you to add new functionality to the interfaces of your libraries and ensure binary compatibility with code written for older versions of those interfaces. They are interface methods that have an implementation, similar to static methods, and the `default` keyword at the beginning of the method signature.\r\n\r\n#### Syntax</h4>\r\n\r\n```java\r\ndefault type methodName(type parameter) {\r\n  body\r\n}\r\n```\r\n\r\nFor example, default method `forEach()` was added to `Iterable` interface. This method takes a `Consumer` argument and performs action for each element (similar to enhanced `for-each` construct). `List` interface which extends `Iterable` can now be used with `forEach()` method:\r\n\r\n```java\r\nList<String> days = Arrays.asList(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\r\ndays.forEach(day -> System.out.println(day));\r\n```\r\n\r\n#### Example\r\n\r\n```java\r\npublic interface Calculator {\r\n  double calculate(double number);\r\n\r\n  default double sqrt(double number) {\r\n    return Math.sqrt(number);\r\n  }\r\n}\r\n```\r\n\r\n```java\r\nCalculator sc = x -> x * x;\r\ndouble square = sc.calculate(10.0); // 100.0\r\ndouble sqrt = sc.sqrt(square);      // 10.0\r\n```\r\n\r\n### Method References\r\n\r\nJava 8 enables you to pass references of methods or constructors via the :: keyword. Method references are compact, easy-to-read lambda expressions for methods that already have a name. They are preferred over lambda expression if the expression does nothing but calls an existing method.\r\n\r\n#### Syntax\r\n\r\n```java\r\nReference::methodName\r\n```\r\n\r\n#### Types of Method References\r\n\r\n<table class=\"table table-bordered table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th scope=\"col\">Type</th>\r\n            <th scope=\"col\">Example</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <th scope=\"row\">Reference to a static method</th>\r\n            <td>ContainingClass::staticMethodName</td>\r\n        </tr>\r\n        <tr>\r\n            <th scope=\"row\">Reference to an instance method of a particular object</th>\r\n            <td>containingObject::instanceMethodName</td>\r\n        </tr>\r\n        <tr>\r\n            <th scope=\"row\">Reference to an instance method of an arbitrary object of a particular type</th>\r\n            <td>ContainingType::methodName</td>\r\n        </tr>\r\n        <tr>\r\n            <th scope=\"row\">Reference to a constructor</th>\r\n            <td>ClassName::new</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n#### Example\r\n\r\n##### Reference to a static method\r\n\r\n1. Example 1\r\n\r\n```java\r\nclass Person {\r\n  private LocalDate birthday;\r\n\r\n  public Person() {}\r\n\r\n  public Person(LocalDate birthday) {\r\n    this.birthday = birthday;\r\n  }\r\n\r\n  // setters, getters\r\n\r\n  public static int compareByAge(Person a, Person b) {\r\n    return a.birthday.compareTo(b.birthday);\r\n  }\r\n}\r\n```\r\n\r\n```java\r\nPerson p1 = new Person(LocalDate.of(2000, 6, 21));\r\nPerson p2 = new Person(LocalDate.of(2000, 6, 15));\r\nPerson p3 = new Person(LocalDate.of(1998, 3, 28));\r\nPerson[] persons = {p1, p2, p3};\r\n```\r\n\r\nLambda Expression\r\n\r\n```java\r\nArrays.sort(persons, (p1, p2) -> Person.compareByAge(p1, p2));\r\n```\r\n\r\nMethod Reference\r\n\r\n```java\r\nArrays.sort(persons, Person::compareByAge);\r\n```\r\n\r\n1. Example 2\r\n\r\n```java\r\n@FunctionalInterface\r\npublic interface StringToIntConverter {\r\n  int convert(String string);\r\n}\r\n```\r\n\r\nLambda Expression\r\n\r\n```java\r\nStringToIntConverter converter = s -> Integer.valueOf(s);\r\nint i = converter.convert(\"10\");\r\n```\r\n\r\nMethod Reference\r\n\r\n```java\r\nStringToIntConverter converter = Integer::valueOf;\r\nint i = converter.convert(\"10\");\r\n```\r\n\r\n##### Reference to an instance method of a particular object\r\n\r\n1. Example 1\r\n\r\n```java\r\npublic class Something {\r\n  public int getYear(LocalDate localDate) {\r\n    return localDate.getYear();\r\n  }\r\n}\r\n```\r\n\r\nLambda Expression\r\n\r\n```java\r\nSomething something = new Something();\r\nFunction<LocalDate, Integer> f = d -> something.getYear(d);\r\nint year = f.apply(p1.getBirthday());\r\n```\r\n\r\nMethod Reference\r\n\r\n```java\r\nSomething something = new Something();\r\nFunction<LocalDate, Integer> f = something::getYear;\r\nint year = f.apply(p1.getBirthday());\r\n```\r\n\r\n2. Example 2\r\n\r\n```java\r\npublic interface PersonDao {\r\n  Person findById(int id);\r\n}\r\n```\r\n\r\nLambda Expression\r\n\r\n```java\r\nPersonDao personDao = new PersonDaoImpl();\r\nFunction<Integer, Person> f = id -> personDao.findById(id);\r\nPerson person = f.apply(1);\r\n```\r\n\r\nMethod Reference\r\n\r\n```java\r\nPersonDao personDao = new PersonDaoImpl();\r\nFunction<Integer, Person > f = personDao::findById;\r\nPerson person = f.apply(1);\r\n```\r\n\r\n##### Reference to an instance method of an arbitrary object of a particular type\r\n\r\n1. Example 1\r\n\r\nLambda Expression\r\n\r\n```java\r\nFunction<String, String> f = s -> s.toUpperCase();\r\nString httpGet = f.apply(\"get\");\r\n```\r\n\r\nMethod Reference\r\n\r\n```java\r\nFunction<String, String> f = String::toUpperCase;\r\nString httpGet = f.apply(\"get\");\r\n```\r\n\r\n2. Example 2\r\n\r\nLambda Expression\r\n\r\n```java\r\nPerson person = ...\r\nFunction<Person, LocalDate> f = p -> p.getBirthday();\r\nLocalDate birthday = f.apply(person);\r\n```\r\n\r\nMethod Reference\r\n\r\n```java\r\nPerson person = ...\r\nFunction<Person, LocalDate> f = Person::getBirthday;\r\nLocalDate birthday = f.apply(person);\r\n```\r\n\r\n##### Reference to a constructor</h5>\r\n\r\n1. Example 1\r\n\r\nLambda Expression\r\n\r\n```java\r\nFunction<LocalDate, Person> f = d -> new Person(d);\r\nLocalDate birthday = LocalDate.of(2000, 10, 12);\r\nPerson person = f.apply(birthday);\r\n```\r\n\r\nMethod Reference\r\n\r\n```java\r\nFunction<LocalDate, Person> f = Person::new;\r\nLocalDate birthday = LocalDate.of(2000, 10, 12);\r\nPerson person = f.apply(birthday);\r\n```\r\n\r\n2. Example 2\r\n\r\nLambda Expression\r\n\r\n```java\r\n    Supplier<Person> s = () -> new Person();\r\n    Person person = s.get();\r\n```\r\n\r\nMethod Reference\r\n\r\n```java\r\n    Supplier<Person> s = Person::new;\r\n    Person person = s.get();\r\n```\r\n\r\nTo be continued...\r\n"}},"__N_SSG":true}