{"pageProps":{"post":{"title":"Java Web Application with Embedded Tomcat","excerpt":"This tutorial is to create a Java web application using embedded Apache Tomcat web server.","date":"2019-08-31","image":{"cover":"/assets/blog/java-web-application-with-embedded-tomcat/cover.PNG","og":"/assets/blog/java-web-application-with-embedded-tomcat/cover.PNG"},"slug":"java-web-application-with-embedded-tomcat","content":"\r\n### Purpose\r\n\r\nThis is to create a web application in Java. The Apache Tomcat will be emddeded to the JAR (not WAR), called uber/fat JAR. Other dependencies, if there is any, will also be included.\r\n\r\nWe will create a page with the following URL:\r\n\r\n```\r\nhttp://localhost:8080/app/\r\n```\r\n\r\nThis page will display an introduction about embedding Tomcat with Java Web application. This also include button that is link to _[Books](http://localhost:8080/app/books)_ page.\r\n\r\n**_Book_** page is a list of books with columns: **_ID_**, **_Title_**, **_Edition_** and **_Action_** button that when clicked will display a modal consisting more information about selected book.\r\n\r\n### Requirements\r\n\r\n- JDK 8\r\n- Maven\r\n- an IDE - Eclipse (Or NetBeans, Intellij IDEA, if you prefer)\r\n\r\n### Build with Maven\r\n\r\nFirst, we'll create a Java Maven project. Open your terminal and cd to your preferred workspace and run the following commands:\r\n\r\n```bash\r\n$ mkdir java-web-app-with-embedded-tomcat\r\n$ cd java-web-app-with-embedded-tomcat\r\n$ mkdir -p src/main/java/io/github/julinjupiter/app\r\n$ mkdir src/main/resources\r\n$ mkdir -p src/main/webapp/WEB-INF\r\n$ touch pom.xml\r\n```\r\n\r\n_Note:_ you can choose your own package instead of _io/github/julianjupiter/app_ (_io.github.julinjupiter.app_)\r\n\r\nThe project structure should now be:\r\n\r\n```\r\n    java-web-app-with-embedded-tomcat\r\n    └── src\r\n        └── main\r\n            └── java\r\n                └── io\r\n                    └── github\r\n                        └── julianjupiter\r\n                            └── app\r\n            └── resources\r\n            └── webapp\r\n                └── WEB-INF\r\n    └── pom.xml\r\n```\r\n\r\nOpen **_pom.xml_** using your favorite editor (mine is [Visual Studio Code](https://code.visualstudio.com)). Copy and paste the following XML.\r\n\r\n```markup\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>io.github.julianjupiter</groupId>\r\n  <artifactId>java-web-app-with-embedded-tomcat</artifactId>\r\n  <version>1.0.0-SNAPSHOT</version>\r\n  <packaging>jar</packaging>\r\n\r\n  <name>java-web-app-with-embedded-tomcat</name>\r\n  <description>Java Web Application with Embedded Tomcat.</description>\r\n\r\n  <properties>\r\n      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n      <maven.compiler.source>1.8</maven.compiler.source>\r\n      <maven.compiler.target>1.8</maven.compiler.target>\r\n      <failOnMissingWebXml>false</failOnMissingWebXml>\r\n      <tomcat.version>9.0.13</tomcat.version>\r\n      <slf4j.version>1.7.25</slf4j.version>\r\n  </properties>\r\n\r\n  <dependencies>\r\n      <dependency>\r\n          <groupId>org.apache.tomcat.embed</groupId>\r\n          <artifactId>tomcat-embed-core</artifactId>\r\n          <version>${tomcat.version}</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>org.apache.tomcat.embed</groupId>\r\n          <artifactId>tomcat-embed-jasper</artifactId>\r\n          <version>${tomcat.version}</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>javax.servlet</groupId>\r\n          <artifactId>jstl</artifactId>\r\n          <version>1.2</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>javax.json.bind</groupId>\r\n          <artifactId>javax.json.bind-api</artifactId>\r\n          <version>1.0</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>org.eclipse</groupId>\r\n          <artifactId>yasson</artifactId>\r\n          <version>1.0.2</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>org.glassfish</groupId>\r\n          <artifactId>javax.json</artifactId>\r\n          <version>1.1.3</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>org.slf4j</groupId>\r\n          <artifactId>slf4j-log4j12</artifactId>\r\n          <version>${slf4j.version}</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>org.slf4j</groupId>\r\n          <artifactId>jcl-over-slf4j</artifactId>\r\n          <version>${slf4j.version}</version>\r\n      </dependency>\r\n  </dependencies>\r\n\r\n  <build>\r\n      <resources>\r\n          <resource>\r\n              <directory>src/main/webapp</directory>\r\n              <targetPath>META-INF/resources</targetPath>\r\n          </resource>\r\n          <resource>\r\n              <directory>src/main/resources</directory>\r\n          </resource>\r\n      </resources>\r\n      <plugins>\r\n          <plugin>\r\n              <groupId>org.apache.maven.plugins</groupId>\r\n              <artifactId>maven-shade-plugin</artifactId>\r\n              <version>3.1.1</version>\r\n              <configuration>\r\n                  <createDependencyReducedPom>true</createDependencyReducedPom>\r\n                  <filters>\r\n                      <filter>\r\n                          <artifact>*:*</artifact>\r\n                          <excludes>\r\n                              <exclude>META-INF/*.SF</exclude>\r\n                              <exclude>META-INF/*.DSA</exclude>\r\n                              <exclude>META-INF/*.RSA</exclude>\r\n                          </excludes>\r\n                      </filter>\r\n                  </filters>\r\n              </configuration>\r\n              <executions>\r\n                  <execution>\r\n                      <phase>package</phase>\r\n                      <goals>\r\n                          <goal>shade</goal>\r\n                      </goals>\r\n                      <configuration>\r\n                          <createDependencyReducedPom>false</createDependencyReducedPom>\r\n                          <transformers>\r\n                              <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\r\n                              <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\r\n                                  <mainClass>io.github.julianjupiter.app.Main</mainClass>\r\n                              </transformer>\r\n                          </transformers>\r\n                      </configuration>\r\n                  </execution>\r\n              </executions>\r\n          </plugin>\r\n      </plugins>\r\n  </build>\r\n</project>\r\n```\r\n\r\nTake note that our **_packaging_** is **_jar_** and we are using **_Maven Shade Plugin_** here to package our application into JAR. From its website, it reads:\r\n\r\n_This plugin provides the capability to package the artifact in an uber-jar, including its dependencies and to shade - i.e. rename - the packages of some of the dependencies._\r\n\r\nAnother thing worth to mention is the **_mainClass_** tag where we define our class with **_main_** method.\r\n\r\nLastly, we include at least two dependencies for embedding Tomcat: _tomcat-embed-core_, _tomcat-embed-jasper_.\r\n\r\n### Import to Eclipse\r\n\r\nTo import the project:\r\n\r\n_Eclipse - File > Import... > Maven > Existing Maven Projects > Browse ... (for Root Directory) > Finish_\r\n\r\n### Let's Start Coding\r\n\r\n#### Server\r\n\r\nCreate a package **_server_** under **_app_**. Under this package, we will have an interface **_Server_** and class **_TomcatServer_**. The interface will have one abstract method, **_run_** which will serve as entry point to start our Tomcat server. This opens a possibility to add more servers other than Tomcat, either from scratch or use existing ones (Jetty, Undertow).\r\n\r\n##### `Server.java`\r\n\r\n```java\r\npackage io.github.julianjupiter.app.server;\r\n\r\npublic interface Server {\r\n    public void run(String[] args);\r\n}\r\n```\r\n\r\n##### `TomcatServer.java`\r\n\r\n```java\r\npackage io.github.julianjupiter.app.server;\r\n\r\nimport java.io.File;\r\n\r\nimport org.apache.catalina.Context;\r\nimport org.apache.catalina.LifecycleException;\r\nimport org.apache.catalina.WebResourceRoot;\r\nimport org.apache.catalina.startup.Tomcat;\r\nimport org.apache.catalina.webresources.DirResourceSet;\r\nimport org.apache.catalina.webresources.StandardRoot;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class TomcatServer implements Server {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(TomcatServer.class);\r\n    private static final String DEFAULT_HOST = \"localhost\";\r\n    private static final int DEFAULT_PORT = 8080;\r\n    private static final String DEFAULT_CONTEXT_PATH = \"/app\";\r\n    private static final String DOC_BASE = \".\";\r\n    private static final String ADDITION_WEB_INF_CLASSES = \"target/classes\";\r\n    private static final String WEB_APP_MOUNT = \"/WEB-INF/classes\";\r\n    private static final String INTERNAL_PATH = \"/\";\r\n\r\n    @Override\r\n    public void run(String[] args) {\r\n        int port = port(args);\r\n        Tomcat tomcat = tomcat(port);\r\n\r\n        try {\r\n            tomcat.start();\r\n        } catch (LifecycleException exception) {\r\n            LOGGER.error(\"{}\", exception.getMessage());\r\n            LOGGER.error(\"Exit...\");\r\n            System.exit(1);\r\n        }\r\n\r\n        LOGGER.info(\"Application started with URL {}.\", DEFAULT_HOST + \":\" + port + DEFAULT_CONTEXT_PATH);\r\n        LOGGER.info(\"Hit Ctrl + D or C to stop it...\");\r\n        tomcat.getServer().await();\r\n    }\r\n\r\n    private int port(String[] args) {\r\n        if (args.length > 0) {\r\n            String port = args[0];\r\n            try {\r\n                return Integer.valueOf(port);\r\n            } catch (NumberFormatException exception) {\r\n                LOGGER.error(\"Invalid port number argument {}\", port, exception);\r\n            }\r\n        }\r\n\r\n        return DEFAULT_PORT;\r\n    }\r\n\r\n    private Tomcat tomcat(int port) {\r\n        Tomcat tomcat = new Tomcat();\r\n        tomcat.setHostname(DEFAULT_HOST);\r\n        tomcat.getHost().setAppBase(DOC_BASE);\r\n        tomcat.setPort(port);\r\n        tomcat.getConnector();\r\n        context(tomcat);\r\n\r\n        return tomcat;\r\n    }\r\n\r\n    private Context context(Tomcat tomcat) {\r\n        Context context = tomcat.addWebapp(DEFAULT_CONTEXT_PATH, DOC_BASE);\r\n        File classes = new File(ADDITION_WEB_INF_CLASSES);\r\n        String base = classes.getAbsolutePath();\r\n        WebResourceRoot resources = new StandardRoot(context);\r\n        resources.addPreResources(new DirResourceSet(resources, WEB_APP_MOUNT, base, INTERNAL_PATH));\r\n        context.setResources(resources);\r\n\r\n        return context;\r\n    }\r\n}\r\n```\r\n\r\n##### Main.java\r\n\r\nWe will now create our main class as defined by **_mainClass_** in pom.xml.\r\n\r\nAs this class contains **_main_** method, this will serve as entry point to start our application and the server. Here, we instantiate the **_TomcatServer_** class and call **_run_** method. We pass in **_args_** argument from **_main_** method to **_run_** method. By default, the server will listen on port **_8080_** but we can override it by passing desired port number to our **_main_** method. This is optional, though (stick to 8080).\r\n\r\n```java\r\npackage io.github.julianjupiter.app;\r\n\r\nimport io.github.julianjupiter.app.server.Server;\r\nimport io.github.julianjupiter.app.server.TomcatServer;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Server app = new TomcatServer();\r\n        app.run(args);\r\n    }\r\n}\r\n```\r\n\r\nWith the codes above, we can now build and run our application, but since there is no Servlet handler or default JSP page, it will just error page.\r\n\r\nTo test our application, create a **_index.jsp_** file inside **_webapp_** folder.\r\n\r\n```markup\r\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%>\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Java Web Application with Embedded Tomcat</title>\r\n    </head>\r\n    <body>\r\n        <h1>Hello, world!</h1>\r\n    </body>\r\n</html>\r\n```\r\n\r\nTo build and run the application, run the following commands under the root directory of the project:\r\n\r\n```bash\r\n$ mvn package\r\n$ java -jar ./target/java-web-app-with-embedded-tomcat-1.0.0-SNAPSHOT.jar\r\n```\r\n\r\nIf the application starts successfully, open your browser: [http://localhost:8080/app](http://localhost:8080/app).\r\n\r\n<br>\r\n<img class=\"img-fluid\" src=\"/assets/blog/java-web-application-with-embedded-tomcat/1.PNG\">\r\n<br>\r\n<br>\r\n\r\n### Add Servlet, JSPs and Other Classes\r\n\r\n#### Domain Model\r\n\r\n##### `Book.java`\r\n\r\nThis class is simply a POJO as state container of our data.\r\n\r\n```java\r\npackage io.github.julianjupiter.app.domain;\r\n\r\nimport javax.json.bind.annotation.JsonbNillable;\r\n\r\n@JsonbNillable\r\npublic class Book {\r\n    private long id;\r\n    private String title;\r\n    private String edition;\r\n\r\n    private String isbn;\r\n    private String author;\r\n    private String yearPublished;\r\n\r\n    public long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    public String getEdition() {\r\n        return edition;\r\n    }\r\n\r\n    public String getIsbn() {\r\n        return isbn;\r\n    }\r\n\r\n    public void setIsbn(String isbn) {\r\n        this.isbn = isbn;\r\n    }\r\n\r\n    public void setEdition(String edition) {\r\n        this.edition = edition;\r\n    }\r\n\r\n    public String getAuthor() {\r\n        return author;\r\n    }\r\n\r\n    public void setAuthor(String author) {\r\n        this.author = author;\r\n    }\r\n\r\n    public String getYearPublished() {\r\n        return yearPublished;\r\n    }\r\n\r\n    public void setYearPublished(String yearPublished) {\r\n        this.yearPublished = yearPublished;\r\n    }\r\n}\r\n```\r\n\r\n#### Repository\r\n\r\nThese serve our repository. However, the data is just a dummy for this demo.\r\n\r\n##### `BookRepository.java`\r\n\r\n```java\r\n    package io.github.julianjupiter.app.repository;\r\n\r\n    import java.util.Optional;\r\n\r\n    import io.github.julianjupiter.app.domain.Book;\r\n\r\n    public interface BookRepository {\r\n\r\n        Iterable<Book> findAll();\r\n\r\n        Optional<Book> findById(long id);\r\n\r\n    }\r\n```\r\n\r\n##### `BookRepositoryImpl.java`\r\n\r\n```java\r\npackage io.github.julianjupiter.app.repository;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport io.github.julianjupiter.app.domain.Book;\r\n\r\npublic class BookRepositoryImpl implements BookRepository {\r\n\r\n    private static List<Book> bookList = new ArrayList<>();\r\n\r\n    static {\r\n        Book book1 = new Book();\r\n        book1.setId(1L);\r\n        book1.setTitle(\"Beginning Spring Boot 2\");\r\n        book1.setIsbn(\"978-1-4842-2930-9\");\r\n        book1.setAuthor(\"K. Siva Prasad Reddy\");\r\n        book1.setYearPublished(\"2017\");\r\n\r\n        Book book2 = new Book();\r\n        book2.setId(2L);\r\n        book2.setTitle(\"Effective Java\");\r\n        book2.setEdition(\"Third Edition\");\r\n        book2.setIsbn(\"978-0-13-468599-1\");\r\n        book2.setAuthor(\"Joshua Block\");\r\n        book2.setYearPublished(\"2018\");\r\n\r\n        Book[] books = { book1, book2 };\r\n        bookList = Arrays.asList(books);\r\n    }\r\n\r\n    @Override\r\n    public Iterable<Book> findAll() {\r\n        return bookList;\r\n    }\r\n\r\n    @Override\r\n    public Optional<Book> findById(long id) {\r\n        return bookList.stream()\r\n            .filter(book -> book.getId() == id)\r\n            .findFirst();\r\n    }\r\n\r\n}\r\n```\r\n\r\n#### Service\r\n\r\nThese serve as intermediary between our controller and repository.\r\n\r\n##### `BookService.java`\r\n\r\n```java\r\npackage io.github.julianjupiter.app.service;\r\n\r\nimport java.util.Optional;\r\n\r\nimport io.github.julianjupiter.app.domain.Book;\r\n\r\npublic interface BookService {\r\n\r\n    Iterable<Book> findAll();\r\n\r\n    Optional<Book> findById(long id);\r\n\r\n}\r\n```\r\n\r\n##### `BookServiceImpl.java`\r\n\r\n```java\r\npackage io.github.julianjupiter.app.service;\r\n\r\nimport java.util.Optional;\r\n\r\nimport io.github.julianjupiter.app.domain.Book;\r\nimport io.github.julianjupiter.app.repository.BookRepository;\r\n\r\npublic class BookServiceImpl implements BookService {\r\n\r\n    private BookRepository bookRepository;\r\n\r\n    public BookServiceImpl(BookRepository bookRepository) {\r\n        this.bookRepository = bookRepository;\r\n    }\r\n\r\n    @Override\r\n    public Iterable<Book> findAll() {\r\n        return this.bookRepository.findAll();\r\n    }\r\n\r\n    @Override\r\n    public Optional<Book> findById(long id) {\r\n        return this.bookRepository.findById(id);\r\n    }\r\n\r\n}\r\n```\r\n\r\n##### Controller\r\n\r\n##### `BaseController.java`\r\n\r\nWe'll create a base controller that will contain common properties and methods to be used by our controller. We extends this class with **_HttpServlet_** so that any class (controller) that extends it becomes an Servlet too.\r\n\r\n```java\r\npackage io.github.julianjupiter.app.controller;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class BaseController extends HttpServlet {\r\n\r\n    private static final long serialVersionUID = 632349127293785744L;\r\n    private static final String VIEW_PREFIX = \"/WEB-INF/templates/\";\r\n    private static final String VIEW_SUFFIX = \".jsp\";\r\n\r\n    protected String getAction(HttpServletRequest request) {\r\n        String action = request.getParameter(\"action\");\r\n\r\n        return (action == null) || action.isEmpty() ? \"\" : action;\r\n    }\r\n\r\n    protected void render(HttpServletRequest request, HttpServletResponse response, String template) throws ServletException, IOException {\r\n        getServletContext().getRequestDispatcher(VIEW_PREFIX + template + VIEW_SUFFIX).forward(request, response);\r\n    }\r\n\r\n    public void redirect(HttpServletResponse response, String path) throws IOException {\r\n        response.sendRedirect(path);\r\n    }\r\n\r\n}\r\n```\r\n\r\n##### `BookController.java`\r\n\r\nThe **_BookController_** extends **_BaseController_** class to become a Servlet. This will serve as the controller. Since our application will only display list of books and individual book, only **_doGet_** method will be implemented. This method intercepts all **_HTTP GET_** request.\r\n\r\n```java\r\npackage io.github.julianjupiter.app.controller;\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.time.ZonedDateTime;\r\nimport java.util.Optional;\r\n\r\nimport javax.json.bind.Jsonb;\r\nimport javax.json.bind.JsonbBuilder;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport io.github.julianjupiter.app.domain.Book;\r\nimport io.github.julianjupiter.app.repository.BookRepositoryImpl;\r\nimport io.github.julianjupiter.app.service.BookService;\r\nimport io.github.julianjupiter.app.service.BookServiceImpl;\r\nimport io.github.julianjupiter.app.util.Error;\r\nimport io.github.julianjupiter.app.util.ErrorResponse;\r\n\r\n@WebServlet(name = \"bookController\", urlPatterns = \"/books\")\r\npublic class BookController extends BaseController {\r\n\r\n    private static final long serialVersionUID = -8199839431714257029L;\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(BookController.class);\r\n    private final BookService bookService;\r\n\r\n    public BookController() {\r\n        this.bookService = new BookServiceImpl(new BookRepositoryImpl());\r\n    }\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String action = this.getAction(request);\r\n        switch (action) {\r\n            case \"\":\r\n            case \"list\":\r\n                try {\r\n                    this.findAll(request, response);\r\n                } catch (Exception exception) {\r\n                    LOGGER.error(exception.getMessage());\r\n                }\r\n\r\n                break;\r\n            case \"view\":\r\n                try {\r\n                    this.findById(request, response);\r\n                } catch (Exception exception) {\r\n                    LOGGER.error(exception.getMessage());\r\n                }\r\n\r\n                break;\r\n\r\n            default:\r\n                try {\r\n                    response.setStatus(404);\r\n                    this.render(request, response, \"error/404\");\r\n                } catch (Exception exception) {\r\n                    LOGGER.error(exception.getMessage());\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    private void findAll(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        Iterable<Book> books = this.bookService.findAll();\r\n        request.setAttribute(\"pageName\", \"Books\");\r\n        request.setAttribute(\"books\", books);\r\n        this.render(request, response, \"book/list\");\r\n    }\r\n\r\n    private void findById(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        String id = request.getParameter(\"id\");\r\n        long bookId = Long.parseLong(id);\r\n        Optional<Book> book = this.bookService.findById(bookId);\r\n        String bookJson;\r\n        try(Jsonb jsonbObject = JsonbBuilder.create()) {\r\n            if (book.isPresent()) {\r\n                response.setStatus(200);\r\n                bookJson = jsonbObject.toJson(book.get());\r\n            } else {\r\n                response.setStatus(404);\r\n                ErrorResponse errorResponse = new ErrorResponse();\r\n                Error error = new Error();\r\n                error.setMessage(\"Book with ID \" + id + \" was not found.\");\r\n                error.setCreatedAt(ZonedDateTime.now());\r\n                errorResponse.setError(error);\r\n                bookJson = jsonbObject.toJson(error);\r\n            }\r\n        }\r\n        response.setContentType(\"application/json\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        PrintWriter out = response.getWriter();\r\n        out.print(bookJson);\r\n        out.flush();\r\n    }\r\n\r\n}\r\n```\r\n\r\n#### Templates\r\n\r\nOur templates will be written in JSP.\r\n\r\nLet's create first **_templates_** folder under **_/webapp/WEB-INF_**. Under this new folder, we'll create four (4) folders - **_book_**, **_components_**, **_error_**, and **_includes_**.\r\n\r\nThe new structure of our Maven project:\r\n\r\n```\r\njava-web-app-with-embedded-tomcat\r\n└── src\r\n    └── main\r\n        └── java\r\n            └── io\r\n                └── github\r\n                    └── julianjupiter\r\n                        └── app\r\n                            └── controller\r\n                            └── domain\r\n                            └── repository\r\n                            └── server\r\n                            └── service\r\n                            └── util\r\n        └── resources\r\n        └── webapp\r\n            └── WEB-INF\r\n                └── templates\r\n                    └── book\r\n                    └── components\r\n                    └── error\r\n                    └── includes\r\n└── pom.xml\r\n```\r\n\r\n##### `includes`\r\n\r\nThese are the common parts of a page.\r\n\r\n###### `init.jsp`\r\n\r\n```markup\r\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\r\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\r\n```\r\n\r\n###### `header.jsp`\r\n\r\n```markup\r\n<%@ include file=\"init.jsp\"%>\r\n<c:if test=\"${not empty param.pageName}\">\r\n    <c:set var=\"pageName\" value=\"${param.pageName}\" />\r\n</c:if>\r\n<!doctype html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n        <meta name=\"description\" content=\"\">\r\n        <meta name=\"author\" content=\"\">\r\n        <link rel=\"icon\" href=\"${pageContext.request.contextPath}/assets/images/favicon.ico\">\r\n        <title>${pageName} - Java Web Application with Embedded Tomcat</title>\r\n        <link rel=\"stylesheet\" href=\"${pageContext.request.contextPath}/assets/vendor/bootstrap/4.1.3/css/bootstrap.min.css\">\r\n        <link rel=\"stylesheet\" href=\"${pageContext.request.contextPath}/assets/css/main.css\">\r\n      </head>\r\n    <body>\r\n        <header>\r\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a class=\"navbar-brand\" href=\"#\">Java Web Application</a>\r\n                  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                  </button>\r\n                  <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div class=\"navbar-nav\">\r\n                        <a class=\"nav-item nav-link<c:if test=\"${pageName == 'Home'}\"> active</c:if>\" href=\"${pageContext.request.contextPath}/\" alt=\"Home\">Home <span class=\"sr-only\">(current)</span></a>\r\n                          <a class=\"nav-item nav-link<c:if test=\"${pageName == 'Books'}\"> active</c:if>\" href=\"${pageContext.request.contextPath}/books\" alt=\"Books\">Books</a>\r\n                    </div>\r\n                  </div>\r\n            </nav>\r\n        </header>\r\n```\r\n\r\n###### `footer.jsp`\r\n\r\n```markup\r\n        <script src=\"${pageContext.request.contextPath}/assets/vendor/jquery/jquery-3.3.1.slim.min.js\"></script>\r\n        <script src=\"${pageContext.request.contextPath}/assets/vendor/popper.js/1.14.3/umd/popper.min.js\"></script>\r\n        <script src=\"${pageContext.request.contextPath}/assets/vendor/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\r\n        <script src=\"${pageContext.request.contextPath}/assets/js/main.js\"></script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n##### `error`\r\n\r\n#### `404.jsp`\r\n\r\n```markup\r\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Java Web Application with Embedded Tomcat</title>\r\n    </head>\r\n    <body>\r\n        <h1>Error 404, Page not found!</h1>\r\n    </body>\r\n</html>\r\n```\r\n\r\n##### `components`\r\n\r\nThese are components used by our pages - modal, table.\r\n\r\n###### `bookModal.jsp`\r\n\r\n```markup\r\n<div class=\"modal fade\" id=\"bookModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"bookModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\" role=\"document\">\r\n        <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                <h5 class=\"modal-title\" id=\"bookModalLabel\"></h5>\r\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n            </div>\r\n        </div>\r\n        </div>\r\n</div>\r\n```\r\n\r\n###### `viewBookTable.jsp`\r\n\r\n```markup\r\n<div id=\"viewBookTable\" class=\"table-responsive\" style=\"display:none;\">\r\n    <table class=\"table table-hover table-borderless\">\r\n        <tbody>\r\n            <tr>\r\n                <th class=\"text-right\" scope=\"row\">ID</th>\r\n                <td id=\"bookId\"></td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"text-right\" scope=\"row\">Title</th>\r\n                <td id=\"bookTitle\"></td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"text-right\" scope=\"row\">Edition</th>\r\n                <td id=\"bookEdition\"></td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"text-right\" scope=\"row\">ISBN</th>\r\n                <td id=\"bookIsbn\"></td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"text-right\" scope=\"row\">Author</th>\r\n                <td id=\"bookAuthor\"></td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"text-right\" scope=\"row\">Year Published</th>\r\n                <td id=\"bookYearPublished\"></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n```\r\n\r\n##### `book`\r\n\r\nThis template will be used by our page pertaining to Book in our application.\r\n\r\n###### `list.jsp`\r\n\r\n```markup\r\n<%@ include file=\"/WEB-INF/templates/includes/header.jsp\"%>\r\n<div class=\"jumbotron jumbotron-fluid\">\r\n    <div class=\"container\">\r\n        <h1 class=\"display-4\">Java Web Application with Embedded Tomcat</h1>\r\n        <p class=\"lead\">This is a web application in Java which runs on embedded Apache Tomcat in the form of executable JAR (not WAR), called uber/fat JAR. Other dependencies, if any, are also included.</p>\r\n      </div>\r\n</div>\r\n<main>\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col\">\r\n                <table class=\"table table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">ID</th>\r\n                              <th scope=\"col\">Title</th>\r\n                              <th scope=\"col\">Edition</th>\r\n                              <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                      <tbody>\r\n                          <c:forEach var=\"book\" items=\"${books}\">\r\n                        <tr>\r\n                              <th scope=\"row\">${book.id}</th>\r\n                              <td>${book.title}</td>\r\n                              <td>${book.edition}</td>\r\n                              <td>\r\n                                  <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n                                    <button type=\"button\" class=\"btn btn-info\" data-toggle=\"modal\" data-target=\"#bookModal\" data-book-action=\"viewBook\" data-book-id=\"${book.id}\">View</button>\r\n                                </div>\r\n                              </td>\r\n                        </tr>\r\n                        </c:forEach>\r\n                      </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</main>\r\n<%@ include file=\"/WEB-INF/templates/components/bookModal.jsp\"%>\r\n<%@ include file=\"/WEB-INF/templates/components/viewBookTable.jsp\"%>\r\n<%@ include file=\"/WEB-INF/templates/includes/footer.jsp\"%>\r\n```\r\n\r\n#### Default Page\r\n\r\n##### `index.jsp`\r\n\r\nThis is the default page in our application if we access [http://localhost:8080/app](http://localhost:8080/app).\r\n\r\nRemember the **_index.jsp_** that we created earlier to test our application? We just need to modify that file.\r\n\r\n```markup\r\n<jsp:include page=\"/WEB-INF/templates/includes/header.jsp\">\r\n    <jsp:param value=\"Home\" name=\"pageName\"/>\r\n</jsp:include>\r\n        <div class=\"jumbotron jumbotron-fluid\">\r\n            <div class=\"container\">\r\n                <h1 class=\"display-4\">Java Web Application with Embedded Tomcat</h1>\r\n                <p class=\"lead\">This is a web application in Java which runs on embedded Apache Tomcat in the form of executable JAR (not WAR), called uber/fat JAR. Other dependencies, if any, are also included.</p>\r\n                <a type=\"button\" class=\"btn btn-primary btn-lg\" href=\"${pageContext.request.contextPath}/books\" alt=\"Books\">Books</a>\r\n            </div>\r\n        </div>\r\n<%@ include file=\"/WEB-INF/templates/includes/footer.jsp\"%>\r\n```\r\n\r\n#### Static Files\r\n\r\nOur pages will make use of JavaScript and CSS. It includes Bootstrap CSS framework, hence, the need to import them.\r\n\r\nLet's create **_assets_** folder under **_/webapp_**. Under this new folder, we'll create three (3) folders - **_css_**, **_js_**, and **_vendor_**.\r\n\r\nOur custom styling and JavaScript files will, obviously, be put inside **_css_** and **_js_** folders, respectively, while the third-party ones, Bootstrap, jQuery, Popper.js, will be in **_vendor_** folder.\r\n\r\nThe new structure of our Maven project:\r\n\r\n```\r\njava-web-app-with-embedded-tomcat\r\n└── src\r\n    └── main\r\n        └── java\r\n            └── io\r\n                └── github\r\n                    └── julianjupiter\r\n                        └── app\r\n                            └── controller\r\n                            └── domain\r\n                            └── repository\r\n                            └── server\r\n                            └── service\r\n                            └── util\r\n        └── resources\r\n        └── webapp\r\n            └── assets\r\n                └── css\r\n                └── js\r\n                └── vendor\r\n            └── WEB-INF\r\n                └── templates\r\n                    └── book\r\n                    └── components\r\n                    └── error\r\n                    └── includes\r\n└── pom.xml\r\n```\r\n\r\n###### `css`\r\n\r\n###### `main.css`\r\n\r\n```css\r\n.table-responsive {\r\n  display: table;\r\n}\r\n```\r\n\r\n##### `js`\r\n\r\n###### `main.js`\r\n\r\n```javascript\r\nlet modalTitle = $(\".modal-title\");\r\nlet modalBody = $(\".modal-body\");\r\nlet modalFooter = $(\".modal-footer\");\r\nlet closeBookModal = $(\r\n  '<button id=\"close-book-modal\" type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>'\r\n);\r\n\r\nfunction viewBook(bookModal, bookId) {\r\n  let viewBookTableHidden = $(\"#viewBookTable:hidden\");\r\n  $(bookModal).find(modalTitle).text(\"View Book\");\r\n  $(bookModal).find(modalBody).html(viewBookTableHidden.clone());\r\n  let viewBookTable = $(\"#viewBookTable\");\r\n  $(bookModal).find(viewBookTable).css(\"display\", \"block\");\r\n  $(bookModal).find(modalFooter).append(closeBookModal);\r\n\r\n  fetch(\"books?action=view&id=\" + bookId)\r\n    .then((response) => ({ status: response.status, data: response.json() }))\r\n    .then((response) => {\r\n      if (response.status == 200) {\r\n        response.data.then((value) => {\r\n          $(bookModal).find(\"#bookId\").text(value.id);\r\n          $(bookModal).find(\"#bookTitle\").text(value.title);\r\n          $(bookModal).find(\"#bookEdition\").text(value.edition);\r\n          $(bookModal).find(\"#bookIsbn\").text(value.isbn);\r\n          $(bookModal).find(\"#bookAuthor\").text(value.author);\r\n          $(bookModal).find(\"#bookYearPublished\").text(value.yearPublished);\r\n        });\r\n      } else if (response.status == 404) {\r\n        response.data.then((value) => {\r\n          $(bookModal).find(\".modal-body\").html(value.message);\r\n        });\r\n      } else {\r\n        $(bookModal)\r\n          .find(\".modal-body\")\r\n          .html(\"An unknown error occurred. Please contact Administrator.\");\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Request failed\", error);\r\n      $(bookModal)\r\n        .find(\".modal-body\")\r\n        .html(\"An unknown error occurred. Please contact Administrator.\");\r\n    });\r\n}\r\n\r\nfunction clearModal(modal) {\r\n  $(modal).find(modalTitle).html(\"\");\r\n  $(modal).find(modalBody).html(\"\");\r\n  $(modal).find(modalFooter).html(\"\");\r\n}\r\n\r\n$(document).ready(() => {\r\n  $(\"#bookModal\")\r\n    .on(\"show.bs.modal\", function (event) {\r\n      var bookModal = $(this);\r\n      var button = $(event.relatedTarget);\r\n      var bookAction = button.data(\"book-action\");\r\n      var bookId = button.data(\"book-id\");\r\n\r\n      switch (bookAction) {\r\n        case \"addBook\":\r\n          addBook(bookModal);\r\n          break;\r\n\r\n        case \"viewBook\":\r\n          viewBook(this, bookId);\r\n          break;\r\n      }\r\n    })\r\n    .on(\"hidden.bs.modal\", function (event) {\r\n      clearModal(this);\r\n    });\r\n});\r\n```\r\n\r\n##### `vendor`\r\n\r\nFor the [Bootstrap](https://getbootstrap.com \"Bootstrap · The most popular HTML, CSS, and JS library in the world.\"), [jQuery](https://jquery.com/ \"jQuery\"), and [Popper.js](https://popper.js.org/ \"Popper - Tooltip & Popover Positioning Engine\"), you can download them from their respective sites.\r\n\r\nCheck **_header.jsp_** and **_footer.jsp_** files how these frameworks/libraries structured in our project.\r\n\r\n#### Re-build and Run our Application\r\n\r\nRun the following commands and open [http://localhost:8080/app](http://localhost/app) in our browser.\r\n\r\n```bash\r\n$ mvn clean package\r\n$ java -jar ./target/java-web-app-with-embedded-tomcat-1.0.0-SNAPSHOT.jar\r\n```\r\n\r\n#### Screenshots\r\n\r\n##### Home Page\r\n\r\n<br>\r\n<img class=\"img-fluid\" src=\"/assets/blog/java-web-application-with-embedded-tomcat/2.PNG\">\r\n<br>\r\n<br>\r\n\r\n##### List of Books\r\n\r\n<br>\r\n<img class=\"img-fluid\" src=\"/assets/blog/java-web-application-with-embedded-tomcat/3.PNG\">\r\n<br>\r\n<br>\r\n\r\n##### View a Book\r\n\r\n<br>\r\n<img class=\"img-fluid\" src=\"/assets/blog/java-web-application-with-embedded-tomcat/4.PNG\">\r\n<br>\r\n<br>\r\n\r\n#### Conclusion\r\n\r\nWe're able to create a Servlet application in which we use Embedded Tomcat Server. We build this application into a single JAR file, called Uber or Fat JAR.\r\n\r\nWith this, we no longer need a standalone web server to deploy our application to. We achieved this mechanism by using [Maven Shade Plugin](https://maven.apache.org/plugins/maven-shade-plugin/).\r\n\r\nYou can download complete source code **[here](https://github.com/julianjupiter/java-web-app-with-embedded-tomcat \"Java Web Application with Embedded Tomcat\")**.\r\n"}},"__N_SSG":true}